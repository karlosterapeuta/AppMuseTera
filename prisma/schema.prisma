generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [pgcrypto]
}

model User {
  id                   String    @id @default(cuid())
  name                 String
  email                String    @unique
  password             String?
  professionalRegister String?
  image                String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  accounts             Account[]
  sessions             Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model assessments {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  patient_id String?   @db.Uuid
  date       DateTime  @db.Timestamptz(6)
  type       String
  content    Json?
  created_at DateTime? @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updated_at DateTime? @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  patients   patients? @relation(fields: [patient_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([date], map: "idx_assessments_date")
  @@index([patient_id], map: "idx_assessments_patient_id")
}

model patients {
  id          String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  birth_date  DateTime?     @db.Date
  contact     String?
  responsible String?
  created_at  DateTime?     @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updated_at  DateTime?     @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  assessments assessments[]
  sessions    sessions[]

  @@index([name], map: "idx_patients_name")
}

model sessions {
  id              String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  patient_id      String?   @db.Uuid
  date            DateTime  @db.Timestamptz(6)
  notes           String?
  emotional_state Json?
  created_at      DateTime? @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updated_at      DateTime? @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  patients        patients? @relation(fields: [patient_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([date], map: "idx_sessions_date")
  @@index([patient_id], map: "idx_sessions_patient_id")
}
